name: Build OpenWrt for strongswan8g

on:
  workflow_dispatch:
  repository_dispatch:
  push:
    paths:
      - .github/workflows/**
      - config/**
      - scripts/**
    branches:
      - main
      - master

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v24.10.2
  CONFIG_FILE: ${{ github.workspace }}/main-repo/config/strongswan.config
  DIY_P1_SH: ${{ github.workspace }}/main-repo/diy-part1.sh
  DIY_P2_SH: ${{ github.workspace }}/main-repo/diy-part2.sh
  Part3_sh: ${{ github.workspace }}/main-repo/part3.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main-repo

      - name: 清理环境
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          df -h
      - name: 清理之前的构建 (distclean)
        run: |
          # 尝试不同的可能路径
          if [ -d "openwrt" ]; then
          echo "找到openwrt目录，执行distclean"
          cd openwrt
          make distclean
          elif [ -d "OpenWRT_AutoBuild/openwrt" ]; then
          echo "找到OpenWRT_AutoBuild/openwrt目录，执行distclean"
          cd OpenWRT_AutoBuild/openwrt
          make distclean
          else
          echo "未找到openwrt目录，跳过distclean"
          fi


#      - name: 增加swap空间
#        run: |
#          echo "增加8GB swap空间..."
#          sudo fallocate -l 8G /swapfile
#          sudo chmod 600 /swapfile
#          sudo mkswap /swapfile
#          sudo swapon /swapfile
#          free -h

      - name: 安装编译环境
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache clang ecj fastjar file g++ gawk \
          gettext git java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev \
          libssl-dev libxml-parser-perl python3 python3-setuptools python3-pip python3-dev \
          python3-pyelftools unzip wget rsync subversion swig time xsltproc \
          zlib1g-dev zlib1g-dev software-properties-common \
          lzma flex bison cmake xxd

      - name: 下载OpenWrt源码
        run: |
          echo "下载OpenWrt 24.10版本..."
          git clone $REPO_URL -b $REPO_BRANCH --depth=1
          cd openwrt
          git describe --tags

      - name: 执行自定义脚本第一部分
        run: |
          cd openwrt
          if [ -f "$DIY_P1_SH" ]; then
            chmod +x "$DIY_P1_SH"
            "$DIY_P1_SH"
          fi
          
      - name: 更新feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 生成设备配置
        run: |
          cd openwrt
          if [ -f "$CONFIG_FILE" ]; then
            cp "$CONFIG_FILE" .config
          fi
          make defconfig

      - name: 执行自定义脚本第二部分
        run: |
          cd openwrt
          if [ -f "$DIY_P2_SH" ]; then
            chmod +x "$DIY_P2_SH"
            "$DIY_P2_SH"
          fi

      - name: 执行自定义脚本第三部分
        run: |
          cd openwrt
          if [ -f "$Part3_sh" ]; then
            chmod +x "$Part3_sh"
            "$Part3_sh"
          fi

      - name: 下载源码包
        run: |
          cd openwrt
          make download -j4
          find dl -size -1024c -exec rm -f {} \; 2>/dev/null || true

      - name: 编译固件
        run: |
          cd openwrt
          echo "开始编译 OpenWrt 24.10 for 小米AX3000T"
          export FORCE_UNSAFE_CONFIGURE=1
          COMPILE_THREADS=$(nproc)
          echo "使用 ${COMPILE_THREADS} 线程编译"
          make -j${COMPILE_THREADS} V=s || make -j1 V=s
          if [ -d "bin/targets/mediatek/filogic" ]; then
            echo "✅ 编译成功！"
            ls -la bin/targets/mediatek/filogic/
            echo "COMPILE_SUCCESS=true" >> $GITHUB_ENV
            echo "FIRMWARE_PATH=$(pwd)/bin/targets/mediatek/filogic" >> $GITHUB_ENV
          else
            echo "❌ 编译失败"
            exit 1
          fi

      - name: 整理固件文件
        if: env.COMPILE_SUCCESS == 'true'
        run: |
          cd ${{ env.FIRMWARE_PATH }}
          rm -rf packages
          find . -name "*.md5sum" -delete
          find . -name "*.sha256sum" -delete
          echo "最终固件文件："
          ls -lh *.bin 2>/dev/null || echo "未找到bin文件"

      - name: 获取当前日期
        id: build_date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: 创建Release
        if: env.COMPILE_SUCCESS == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: openwrt-24.10-${{ github.run_number }}-${{ steps.build_date.outputs.date }}
          name: 小米AX3000T OpenWrt 24.10 - Build ${{ github.run_number }}
          body: |
            🎉 **小米AX3000T OpenWrt 24.10 固件**
            - 基于 OpenWrt 24.10 官方版本
            - 默认地址: http://10.0.0.1
            - 用户名: root，密码为空
            - 包含 strongSwan IPSec VPN
          files: |
            ${{ env.FIRMWARE_PATH }}/*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 编译总结
        if: always()
        run: |
          echo "========================================="
          echo "           编译总结报告"
          echo "========================================="
          echo "状态: ${{ env.COMPILE_SUCCESS == 'true' && '✅ 成功' || '❌ 失败' }}"
          echo "版本: OpenWrt 24.10"
          echo "设备: 小米AX3000T v1"
          echo "构建: #${{ github.run_number }}"
          if [ "${{ env.COMPILE_SUCCESS }}" == "true" ]; then
            echo "固件目录: ${{ env.FIRMWARE_PATH }}"
            echo "🎉 编译成功"
          else
            echo "😞 编译失败，请检查日志"
          fi
          echo "========================================="

name: Build WRT  # 工作流名称：构建 OpenWrt

on:
  workflow_dispatch: # 允许在GitHub网页界面手动触发工作流
  repository_dispatch: # 允许通过API事件触发
  push: # 当有代码推送时触发
    paths:
      - '.github/workflows/**' # 当workflows目录下的文件有变化时
      - 'config/**' # 当config目录下的文件有变化时
      - 'scripts/**' # 当scripts目录下的文件有变化时
    branches: [ main, master ] # 只在主分支触发

env:
  REPO_URL: https://github.com/openwrt/openwrt  # 仓库 URL
  REPO_BRANCH: openwrt-24.10  # 分支名称
  #FEEDS_CONF: feeds.conf.default  # 自定义 feeds 配置文件
  CONFIG_FILE: config/Xiaomi-ax3000t.config  # 修正：指定正确的配置文件路径
  DIY_P1_SH: diy-part1.sh  # 自定义脚本 1
  DIY_P2_SH: diy-part2.sh  # 自定义脚本 2
  UPLOAD_BIN_DIR: false  # 是否上传 bin 目录
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true  # 是否发布 release
  TZ: Asia/Shanghai  # 时区设置

jobs:
  build:
    runs-on: ubuntu-24.04  # 运行环境为 Ubuntu 24.04

    steps:
    - name: Check Server Performance  # 检查服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Checkout  # 检出代码
      uses: actions/checkout@main

#    - name: Before freeing up disk space
#      run: |
#        echo "Before freeing up disk space"
#        echo "=============================================================================="
#        df -hT
#        echo "=============================================================================="
#
#    - name: "Optimize Disk Space"
#      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
#      with:
#        operate_sudo: "True"
#        general_include: ".+"
#        general_exclude: |-
#          ^GCC$
#          ^G\+\+$
#          Clang
#          LLVM
#        docker_include: ".+"
#        docker_prune: "True"
#        docker_clean: "True"
#        apt_prune: "True"
#        apt_clean: "True"
#        homebrew_prune: "True"
#        homebrew_clean: "True"
#        npm_prune: "True"
#        npm_clean: "True"
#        os_swap: "True"
#
#    - name: Freeing up disk space
#      uses: easimon/maximize-build-space@master
#      with: 
#        root-reserve-mb: 2048
#        swap-size-mb: 1
#        remove-dotnet: 'true'
#        remove-android: 'true'
#        remove-haskell: 'true'
#        remove-codeql: 'true'
#        remove-docker-images: 'true'
#
#    - name: Free up disk space complete
#      run: |
#        echo "Free up disk space complete"
#        echo "=============================================================================="
#        df -hT
#        echo "=============================================================================="

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Clone source code
      working-directory: ./
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

#    - name: Load custom feeds  # 加载自定义 feeds
#      run: |
#        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
#        chmod +x $DIY_P1_SH
#        cd openwrt
#        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds  # 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds  # 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

#    - name: Install ddns-go
#      run: |
#        cd openwrt
#        rm -rf package/ddns-go
#        git clone https://github.com/sirpdboy/luci-app-ddns-go.git package/ddns-go
#
#    - name: Install argon
#      run: |
#        cd openwrt/package
#        # 修正：创建目录结构并正确安装主题
#        mkdir -p lean
#        cd lean
#        rm -rf luci-theme-argon
#        git clone -b master https://github.com/jerrykuku/luci-theme-argon.git luci-theme-argon
#
    - name: Load custom configuration  # 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package  # 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware  # 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage  # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory  # 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files  # 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory  # 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    # 新增：创建 GitHub Release（如果需要）
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      run: |
        echo "release_tag=OpenWrt_$(date +"%Y.%m.%d_%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "## OpenWrt 固件信息" >> release.txt
        echo "- 构建日期: $(date)" >> release.txt
        echo "- 设备型号: Xiaomi AX3000T" >> release.txt
        echo "- OpenWrt 版本: 24.10" >> release.txt
        echo "## 默认设置" >> release.txt
        echo "- 管理地址: http://10.0.0.1" >> release.txt
        echo "- 用户名: root" >> release.txt
        echo "- 密码: 无密码（首次登录请设置）" >> release.txt

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

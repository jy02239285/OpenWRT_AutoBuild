---
name: Build OpenWrt 24.10 for Xiaomi AX3000T
on:
  workflow_dispatch: null
  repository_dispatch: null
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet
          /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL

          sudo docker image prune --all --force

          sudo -E apt-get -qq update

          # 添加Ubuntu Universe和Multiverse源

          sudo -E apt-add-repository universe

          sudo -E apt-add-repository multiverse

          sudo -E apt-get -qq update

          # 修正的依赖包列表

          sudo -E apt-get -qq install build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml

          # 安装更多可能需要的依赖

          sudo -E apt-get -qq install ccache cmake curl libxml-parser-perl lzma flex bison xxd

          # 清理

          sudo -E apt-get -qq autoremove --purge

          sudo -E apt-get -qq clean

          sudo timedatectl set-timezone "$TZ"

          sudo mkdir -p /workdir

          sudo chown $USER:$GROUPS /workdir
      - name: Clone OpenWrt source
        working-directory: /workdir
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
      - name: Write Xiaomi AX3000T config
        run: |
          cd /workdir/openwrt
          cat > .config <<EOF
          CONFIG_TARGET_mediatek=y
          CONFIG_TARGET_mediatek_filogic=y
          CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-ax3000t=y
          CONFIG_PACKAGE_base-files=y
          CONFIG_PACKAGE_busybox=y
          CONFIG_PACKAGE_ca-bundle=y
          CONFIG_PACKAGE_ca-certificates=y
          CONFIG_PACKAGE_dropbear=y
          CONFIG_PACKAGE_dnsmasq-full=y
          CONFIG_PACKAGE_firewall4=y
          CONFIG_PACKAGE_nftables=y
          CONFIG_PACKAGE_ppp=y
          CONFIG_PACKAGE_ppp-mod-pppoe=y
          CONFIG_PACKAGE_procd=y
          CONFIG_PACKAGE_procd-ujail=y
          CONFIG_PACKAGE_opkg=y
          CONFIG_PACKAGE_uci=y
          CONFIG_PACKAGE_urandom-seed=y
          CONFIG_PACKAGE_urngd=y
          CONFIG_PACKAGE_ip-full=y
          CONFIG_PACKAGE_ipset=y
          CONFIG_PACKAGE_iptables=y
          CONFIG_PACKAGE_iptables-mod-conntrack-extra=y
          CONFIG_PACKAGE_iptables-mod-ipopt=y
          CONFIG_PACKAGE_kmod-ipt-core=y
          CONFIG_PACKAGE_kmod-ipt-nat=y
          CONFIG_PACKAGE_kmod-nf-conntrack=y
          CONFIG_PACKAGE_kmod-nf-nat=y
          CONFIG_PACKAGE_hostapd-common=y
          CONFIG_PACKAGE_wpad-wolfssl=y
          CONFIG_PACKAGE_kmod-cfg80211=y
          CONFIG_PACKAGE_kmod-mac80211=y
          CONFIG_PACKAGE_wireless-tools=y
          CONFIG_PACKAGE_strongswan-minimal=y
          CONFIG_PACKAGE_strongswan-charon=y
          CONFIG_PACKAGE_strongswan-mod-aes=y
          CONFIG_PACKAGE_strongswan-mod-kernel-netlink=y
          CONFIG_PACKAGE_strongswan-mod-socket-default=y
          CONFIG_PACKAGE_kmod-ipsec=y
          CONFIG_PACKAGE_kmod-ipsec4=y
          CONFIG_PACKAGE_kmod-crypto-aead=y
          CONFIG_PACKAGE_kmod-crypto-authenc=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-base=y
          CONFIG_PACKAGE_luci-mod-admin-full=y
          CONFIG_PACKAGE_luci-mod-network=y
          CONFIG_PACKAGE_luci-mod-status=y
          CONFIG_PACKAGE_luci-mod-system=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-lib-base=y
          CONFIG_PACKAGE_luci-lib-ip=y
          CONFIG_PACKAGE_luci-lib-jsonc=y
          CONFIG_PACKAGE_luci-lib-nixio=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_wget-ssl=y
          CONFIG_PACKAGE_nano=y
          EOF
      - name: Update feeds
        run: cd /workdir/openwrt && ./scripts/feeds update -a
      - name: Install feeds
        run: cd /workdir/openwrt && ./scripts/feeds install -a
      - name: Compile firmware
        id: compile
        run: >
          cd /workdir/openwrt

          make defconfig

          make -j$(nproc) || make -j1 V=s

          echo "status=success" >> $GITHUB_OUTPUT

          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME

          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV

          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      - name: Organize firmware
        id: organize
        run: |
          cd /workdir/openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_AX3000T_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT
      - name: Upload firmware to GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

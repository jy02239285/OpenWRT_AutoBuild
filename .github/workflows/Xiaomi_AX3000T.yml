name: Build OpenWrt 24.10 for Xiaomi AX3000T
on:
  workflow_dispatch: 
  repository_dispatch:
  push:
    paths:
      - '.github/workflows/**'
      - 'config/**'
      - 'scripts/**'
    branches: [ main, master ]
    
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: config/Xiaomi-ax3000t.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main-repo
        
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo add-apt-repository multiverse
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex g++ gawk gcc-multilib \
          gettext git libncurses5-dev libssl-dev libxml-parser-perl make perl \
          python3 python3-pip rsync unzip zlib1g-dev file wget curl \
          time ccache cmake lzma flex bison xxd swig libelf-dev
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown -R $USER:$(id -gn) /workdir
          
      - name: Clone OpenWrt source
        run: |
          cd /workdir
          git clone $REPO_URL -b $REPO_BRANCH openwrt --depth=1
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
      - name: 执行自定义脚本第一部分
        run: |
          cd /workdir/openwrt
          SCRIPT_PATH="${GITHUB_WORKSPACE}/main-repo/${DIY_P1_SH}"
          if [ -f "$SCRIPT_PATH" ]; then
            echo "执行自定义脚本: $SCRIPT_PATH"
            chmod +x "$SCRIPT_PATH"
            bash "$SCRIPT_PATH"
          else
            echo "自定义脚本不存在，跳过: $SCRIPT_PATH"
          fi
          
      - name: 更新feed      
        run: |
          cd /workdir/openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "官方feeds安装完成"
        
      - name: Check dependencies
        run: |
          cd /workdir/openwrt
          ./scripts/feeds uninstall -a
          ./scripts/feeds install -a
       
      - name: 生成设备配置
        run: |
          cd /workdir/openwrt
          echo "配置小米AX3000T..."
          
          CONFIG_PATH="${GITHUB_WORKSPACE}/main-repo/${CONFIG_FILE}"
          if [ -f "$CONFIG_PATH" ]; then
            echo "使用外部配置文件: $CONFIG_PATH"
            # 复制并清理注释
            grep -v '^#' "$CONFIG_PATH" | grep -v '^$' > .config
            echo "清理后的配置文件内容预览:"
            head -10 .config
          else
            echo "外部配置文件不存在，使用默认配置"
            cat > .config << EOF
            CONFIG_TARGET_mediatek=y
            CONFIG_TARGET_mediatek_filogic=y
            CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-ax3000t=y
            # 添加基础包配置
            CONFIG_PACKAGE_luci=y
            CONFIG_PACKAGE_luci-ssl=y
            CONFIG_PACKAGE_luci-i18n-base-zh-cn=y
            CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
            EOF
          fi
          
          echo "配置文件生成完成"
          make defconfig

      - name: 执行自定义脚本第二部分
        run: |
          cd /workdir/openwrt
          SCRIPT_PATH="${GITHUB_WORKSPACE}/main-repo/${DIY_P2_SH}"
          if [ -f "$SCRIPT_PATH" ]; then
            echo "执行自定义脚本: $SCRIPT_PATH"
            chmod +x "$SCRIPT_PATH"
            bash "$SCRIPT_PATH"
          else
            echo "自定义脚本不存在，跳过: $SCRIPT_PATH"
          fi
          
      - name: Check config and dependencies
        run: |
          cd /workdir/openwrt
          echo "=== 最终配置文件验证 ==="
          echo "目标设备:"
          grep "CONFIG_TARGET.*DEVICE.*=y" .config || echo "未找到设备配置"
          echo "=== 包配置摘要 ==="
          grep "^CONFIG_PACKAGE" .config | head -10
          make package/check V=s || true
          
      - name: Compile firmware
        id: compile
        run: |
          cd /workdir/openwrt
          
          # 再次确保配置同步
          make defconfig
          
          # 获取核心数
          CORES=$(nproc)
          echo "使用核心数: $CORES"
          
          echo "=== 编译工具链 ==="
          make -j$CORES tools/compile || make -j1 V=s tools/compile
          make -j$CORES tools/install || make -j1 V=s tools/install
          
          echo "=== 编译工具链 ==="
          make -j$CORES toolchain/compile || make -j1 V=s toolchain/compile
          make -j$CORES toolchain/install || make -j1 V=s toolchain/install
          
          echo "=== 编译内核 ==="
          make -j$CORES target/compile || make -j1 V=s target/compile
          
          echo "=== 编译包 ==="
          make -j$(($CORES * 3 / 4)) package/compile || make -j1 V=s package/compile
          
          echo "=== 安装包 ==="
          make -j$(($CORES/2)) package/install || make -j1 V=s package/install
          
          echo "=== 创建镜像 ==="
          make -j$CORES || make -j1 V=s
          
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          
      - name: Debug on failure
        if: failure()
        run: |
          echo "=== 配置文件检查 ==="
          if [ -f "/workdir/openwrt/.config" ]; then
            echo "配置文件存在，内容摘要:"
            grep "^CONFIG_TARGET" /workdir/openwrt/.config || true
            grep "^CONFIG_PACKAGE" /workdir/openwrt/.config | head -5 || true
          else
            echo "配置文件不存在!"
          fi
          
          echo "=== 检查配置同步状态 ==="
          cd /workdir/openwrt
          make -s oldconfig 2>&1 | head -20 || true
          
          echo "=== 详细错误信息 ==="
          make -j1 V=s package/index 2>&1 | tail -50 || true
          
      - name: Organize firmware
        id: organize
        if: success()
        run: |
          cd /workdir/openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_AX3000T_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: success()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "OpenWrt 24.10 for Xiaomi AX3000T" > release.txt
          echo "编译时间: $(date +"%Y-%m-%d %H:%M:%S")" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware to GitHub release
        uses: softprops/action-gh-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

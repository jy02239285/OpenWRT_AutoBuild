name: Build OpenWrt 24.10 for Xiaomi AX3000T
on:
  workflow_dispatch: 
  repository_dispatch:
  push:
    paths:
      - '.github/workflows/**'
      - 'config/**'
      - 'scripts/**'
    branches: [ main, master ]
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: Xiaomi-ax3000t.config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo add-apt-repository multiverse
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex g++ gawk gcc-multilib \
          gettext git libncurses5-dev libssl-dev libxml-parser-perl make perl \
          python3 python3-pip rsync unzip zlib1g-dev file wget curl \
          time ccache cmake lzma flex bison xxd swig libelf-dev
          sudo timedatectl set-timezone "$TZ"
          # 创建 workdir 并设置正确权限
          sudo mkdir -p /workdir
          sudo chown -R $USER:$(id -gn) /workdir
          
      - name: Clone OpenWrt source
        run: |
          cd /workdir
          git clone $REPO_URL -b $REPO_BRANCH openwrt --depth=1
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
      - name:  生成设备配置
        run: |
              cd openwrt
               echo "配置小米AX3000T..."
        
               if [ -f "../$CONFIG_FILE" ]; then
               echo "使用外部配置文件: ../$CONFIG_FILE"
               cp "../$CONFIG_FILE" .config
               else
               echo "未找到外部配置文件，使用默认配置"
               # 使用简单的配置，避免EOF问题
               echo "CONFIG_TARGET_mediatek=y" > .config
               echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
               echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-ax3000t=y" >> .config
               fi
        
               echo "配置文件生成完成"
               make defconfig
          
      - name: Update feeds
        run: |
          cd /workdir/openwrt
          ./scripts/feeds update -a

      - name: Install feeds
        run: |
          cd /workdir/openwrt
          ./scripts/feeds install -a
        
      - name: Check dependencies
        run: |
          cd /workdir/openwrt
          ./scripts/feeds uninstall -a
          ./scripts/feeds install -a
          make package/index
          
      - name: Check config and dependencies
        run: |
          cd /workdir/openwrt
          make defconfig
          echo "=== 系统信息 ==="
          echo "CPU 核心数: $(nproc)"
          echo "内存: $(free -h | awk '/^Mem:/{print $2}')"
          echo "=== Config file content ==="
          head -20 .config
          echo "=== Config summary ==="
          make printenv V=sc | head -50
          make package/check V=s || true
          
      - name: Compile firmware
        id: compile
        run: |
          cd /workdir/openwrt
          make defconfig
          
          # 获取核心数
          CORES=$(nproc)
          echo "使用核心数: $CORES"
          
          echo "=== 编译工具链 ==="
          make -j$CORES tools/compile || make -j$(($CORES/2)) tools/compile V=s
          make -j$CORES tools/install || make -j$(($CORES/2)) tools/install V=s
          
          echo "=== 编译工具链 ==="
          make -j$CORES toolchain/compile || make -j$(($CORES/2)) toolchain/compile V=s
          make -j$CORES toolchain/install || make -j$(($CORES/2)) toolchain/install V=s
          
          echo "=== 编译内核 ==="
          make -j$CORES target/compile || make -j$(($CORES/2)) target/compile V=s
          
          echo "=== 编译包 ==="
          make -j$(($CORES * 3 / 4)) package/compile || make -j$(($CORES/2)) package/compile V=s
          
          echo "=== 安装包 ==="
          make -j$(($CORES/2)) package/install || make -j2 V=s package/install
          
          echo "=== 创建镜像 ==="
          make -j$CORES || make -j$(($CORES/2)) V=s
          
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          
      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Current directory structure ==="
          ls -la / || true
          echo "=== Checking workdir ==="
          if [ -d "/workdir" ]; then
            ls -la /workdir/
            if [ -d "/workdir/openwrt" ]; then
              cd /workdir/openwrt
              echo "=== Last 50 lines of build log ==="
              tail -n 50 logs/build.log 2>/dev/null || echo "No build.log found"
              
              echo "=== Package install error details ==="
              find . -name "*package*install*.log" -exec echo "=== {} ===" \; -exec tail -n 30 {} \; 2>/dev/null || echo "No package install logs found"
              
              echo "=== Config file content ==="
              head -30 .config 2>/dev/null || echo "No .config found"
              
              echo "=== Disk space ==="
              df -h
              du -sh . 2>/dev/null || true
              
              echo "=== Recent error logs ==="
              find . -name "*.log" -exec echo "=== {} ===" \; -exec tail -n 10 {} \; 2>/dev/null | head -100 || echo "No logs found"
            else
              echo "ERROR: /workdir/openwrt directory does not exist!"
            fi
          else
            echo "ERROR: /workdir directory does not exist!"
            echo "=== Creating workdir and retrying ==="
            sudo mkdir -p /workdir
            sudo chown -R $USER:$(id -gn) /workdir
            ls -la /workdir/ || true
          fi
          
      - name: Organize firmware
        id: organize
        if: success()
        run: |
          cd /workdir/openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_AX3000T_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: success()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware to GitHub release
        uses: softprops/action-gh-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
